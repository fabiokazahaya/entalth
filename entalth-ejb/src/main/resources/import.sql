
CREATE TABLE TBL_CURSO
       (ID NUMBER(10) NOT NULL,
        NOME    VARCHAR2(60),
        PRIMARY KEY (ID));
        
CREATE TABLE TBL_ALUNO
       (CPF    NUMBER(12) NOT NULL,
        MATRICULA VARCHAR2(20) NOT NULL,
        NOME VARCHAR2(60),
        CURSO_ID NUMBER(10),
        PRIMARY KEY (CPF, MATRICULA),
        FOREIGN KEY (CURSO_ID) REFERENCES TBL_CURSO(ID)
        ON DELETE CASCADE);

create or replace 
PROCEDURE GET_CURSOS(P_NOME IN VARCHAR2, curRETURN OUT SYS_REFCURSOR)
    IS
      LIKE_NOME TBL_CURSO.NOME%TYPE;
      ERR_NUM NUMBER;
      ERR_MSG VARCHAR2(100);
    BEGIN
      LIKE_NOME := '%'||(P_NOME)||'%';
     OPEN curRETURN FOR 
     SELECT NOME FROM TBL_CURSO WHERE TBL_CURSO.NOME like LIKE_NOME;

EXCEPTION
  WHEN OTHERS THEN
    ERR_NUM := SQLCODE;
    ERR_MSG := SUBSTR(SQLERRM, 1, 100);
    DBMS_OUTPUT.PUT_LINE('ERRO RECUPERANDO TBL_CURSO ' || ERR_NUM || ERR_MSG);
END GET_CURSOS;

create or replace 
PROCEDURE INSERT_OR_UPDATE_CURSO(P_ID IN NUMERIC DEFAULT NULL, P_NOME VARCHAR2) AS
  AUX_CURSO_ID NUMBER;
  ERR_NUM NUMBER;
  ERR_MSG VARCHAR2(100);
  
BEGIN
    IF (P_ID IS NULL) THEN
        SELECT NVL(MAX(ID),0)+1 INTO AUX_CURSO_ID from TBL_CURSO;
    ELSE
        AUX_CURSO_ID := P_ID;
    END IF;
    
    MERGE INTO TBL_CURSO  TBL_CURSO
    USING dual
    ON (ID = P_ID)
    WHEN MATCHED THEN
       UPDATE SET TBL_CURSO.NOME = P_NOME
    WHEN NOT MATCHED THEN
       INSERT (ID, NOME) VALUES (AUX_CURSO_ID, P_NOME);    
    DBMS_OUTPUT.PUT_LINE('CURSO INSERIDO/ATUALIZADO COM SUCESSO. ' || 'CURSO_ID: ' || AUX_CURSO_ID || ' CURSO NOME: ' || P_NOME);
EXCEPTION
  WHEN OTHERS THEN
    ERR_NUM := SQLCODE;
    ERR_MSG := SUBSTR(SQLERRM, 1, 100);
    DBMS_OUTPUT.PUT_LINE('ERRO INSERINDO/ATUALIZANDO CURSO ' || ERR_NUM || ERR_MSG);
END INSERT_OR_UPDATE_CURSO;

SET AUTOCOMMIT ON;

SET SERVEROUTPUT ON;

commit;

CREATE OR REPLACE PROCEDURE getDBUSERCursor(p_username VARCHAR2, c_dbuser OUT SYS_REFCURSOR)
IS
BEGIN

  OPEN c_dbuser FOR
  SELECT * FROM p_username WHERE USERNAME LIKE p_username || '%';

END;
